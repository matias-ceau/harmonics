[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "harmonics"
version = "0.1.0"
description = "Music Analysis and Creation Library"
readme = "README.md"
license = {text = "GPL-3.0-or-later"}
authors = [
    {name = "Matias Ceau", email = "matias@ceau.net"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "Operating System :: OS Independent",
    "Intended Audience :: Science/Research",
    "Topic :: Multimedia :: Sound/Audio :: Analysis",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.20.0",
    "scipy>=1.7.0",
    "pandas>=1.3.0",
    "pyyaml>=6.0",
    "seaborn>=0.11.0",
    "matplotlib>=3.5.0",
    "mido>=1.2.0",
    "python-rtmidi>=1.4.0",
]

[project.optional-dependencies]
ml = [
    "torch>=1.9.0",
    "transformers>=4.15.0",
    "tensorboard>=2.8.0",
]
dev = [
    "black>=22.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
]

[project.scripts]
harmonics-generate = "harmonics.cli.generate:main"
harmonics-train = "harmonics.cli.train:main"
harmonics-analyze = "harmonics.cli.analyze:main"

[project.urls]
Homepage = "https://github.com/matias-ceau/harmonics"
Repository = "https://github.com/matias-ceau/harmonics"
Issues = "https://github.com/matias-ceau/harmonics/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']

[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=harmonics",
    "--cov-report=term-missing",
]